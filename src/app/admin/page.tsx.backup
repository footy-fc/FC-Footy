/* eslint-disable @typescript-eslint/no-explicit-any */
"use client";

import { Redis } from "@upstash/redis";
import { useEffect, useState } from "react";
import NotificationsTab from "@/components/admin/NotificationsTab";
import TeamsTab from "@/components/admin/TeamsTab";
import LeaguesTab from "@/components/admin/LeaguesTab";
import MembershipsTab from "@/components/admin/MembershipsTab";

const redis = new Redis({
  url: process.env.NEXT_PUBLIC_KV_REST_API_URL,
  token: process.env.NEXT_PUBLIC_KV_REST_API_TOKEN,
});

// Types for team management
interface Team {
  id: string;
  name: string;
  shortName: string;
  abbreviation: string;
  country: string;
  logoUrl: string;
  roomHash?: string;
  createdAt: string;
  updatedAt: string;
}

interface League {
  id: string;
  name: string;
  country: string;
  type: "domestic" | "continental" | "international";
  active: boolean;
  createdAt: string;
  updatedAt: string;
}

interface TeamLeagueMembership {
  id: string;
  teamId: string;
  leagueId: string;
  season: string;
  startDate: string;
  endDate?: string;
  active: boolean;
  createdAt: string;
  updatedAt: string;
}

export default function AdminPage() {
  const [apiKeyInput, setApiKeyInput] = useState("");
  const [authenticated, setAuthenticated] = useState(false);
  const [activeTab, setActiveTab] = useState("notifications");
  
  // Notification state
  const [title, setTitle] = useState("");
  const [body, setBody] = useState("");
  const [category, setCategory] = useState("matches");
  const [adminOnly, setAdminOnly] = useState(false);
  const [responseMessage, setResponseMessage] = useState("");
  const [totalNumberOfUsers, setTotalNumberOfUsers] = useState(0);
  const [loading, setLoading] = useState(false);
  const [customTargetUrl, setCustomTargetUrl] = useState("");
  const [useCustomUrl, setUseCustomUrl] = useState(false);

  // Team management state
  const [teams, setTeams] = useState<Team[]>([]);
  const [leagues, setLeagues] = useState<League[]>([]);
  const [memberships, setMemberships] = useState<{[leagueId: string]: string[]}>({});
  const [loadingTeams, setLoadingTeams] = useState(false);
  const [loadingLeagues, setLoadingLeagues] = useState(false);
  const [loadingMemberships, setLoadingMemberships] = useState(false);
  
  // Pagination and search state
  const [currentPage, setCurrentPage] = useState(1);
  const [teamsPerPage] = useState(20);
  const [searchTerm, setSearchTerm] = useState("");
  const [dataLoaded, setDataLoaded] = useState({
    teams: false,
    leagues: false,
    memberships: false
  });
  
  // Form states
  const [newTeam, setNewTeam] = useState({
    name: "",
    shortName: "",
    abbreviation: "",
    country: "",
    logoUrl: "",
    roomHash: ""
  });
  
  const [newLeague, setNewLeague] = useState({
    id: "",
    name: "",
    country: "",
    type: "domestic" as const,
    active: true
  });
  
  const [newMembership, setNewMembership] = useState({
    teamId: "",
    leagueId: "",
    season: "2024-25",
    startDate: new Date().toISOString().split('T')[0]
  });

  const categories = [
    { value: "matches", label: "Matches" },
    { value: "contests", label: "Contests" },
    { value: "rewards", label: "Rewards" },
    { value: "moneyGames", label: "Money Games" },
    { value: "forYou", label: "For You" },
    { value: "scoutPlayers", label: "Scout Players" },
    { value: "extraTime", label: "Extra Time" },
    { value: "settings", label: "Settings" },
  ];

  // Computed values for teams
  const filteredTeams = teams.filter(team =>
    team.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    team.shortName.toLowerCase().includes(searchTerm.toLowerCase()) ||
    team.abbreviation.toLowerCase().includes(searchTerm.toLowerCase()) ||
    team.country.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const totalPages = Math.ceil(filteredTeams.length / teamsPerPage);
  const startIndex = (currentPage - 1) * teamsPerPage;
  const endIndex = startIndex + teamsPerPage;
  const currentTeams = filteredTeams.slice(startIndex, endIndex);

  // Pagination handlers
  const goToPage = (page: number) => {
    setCurrentPage(page);
  };

  const nextPage = () => {
    if (currentPage < totalPages) {
      setCurrentPage(currentPage + 1);
    }
  };

  const prevPage = () => {
    if (currentPage > 1) {
      setCurrentPage(currentPage - 1);
    }
  };

  // Reset pagination when search changes
  useEffect(() => {
    setCurrentPage(1);
  }, [searchTerm]);

  async function getTotalNumberOfUsers(): Promise<number> {
    const keys = await redis.keys("fc-footy:user:*");
    return keys.length;
  }

  const fetchTotalNumberOfUsers = async () => {
    const totalNumber = await getTotalNumberOfUsers();
    setTotalNumberOfUsers(totalNumber);
  };

  // Team management functions
  const fetchTeams = async () => {
    if (dataLoaded.teams && teams.length > 0) {
      return; // Skip if already loaded
    }
    
    setLoadingTeams(true);
    try {
      const activeLeagues = await redis.smembers('league:active');
      const allTeams: Team[] = [];
      
      // Fetch all team IDs from all leagues in parallel
      const teamIdsPromises = activeLeagues.map(leagueId => 
        redis.smembers(`league:${leagueId}:teams`)
      );
      const teamIdsArrays = await Promise.all(teamIdsPromises);
      
      // Flatten and deduplicate team IDs
      const uniqueTeamIds = [...new Set(teamIdsArrays.flat())];
      
      // Fetch all team data in parallel
      const teamDataPromises = uniqueTeamIds.map(teamId => 
        redis.get(`team:${teamId}`)
      );
      const teamDataResults = await Promise.all(teamDataPromises);
      
      // Process team data
      teamDataResults.forEach(teamData => {
        if (teamData) {
          const team = typeof teamData === 'string' ? JSON.parse(teamData) : teamData;
          if (!allTeams.find(t => t.id === team.id)) {
            allTeams.push(team);
          }
        }
      });
      
      setTeams(allTeams);
      setDataLoaded(prev => ({ ...prev, teams: true }));
    } catch (error) {
      console.error('Error fetching teams:', error);
    } finally {
      setLoadingTeams(false);
    }
  };

  const fetchLeagues = async () => {
    if (dataLoaded.leagues && leagues.length > 0) {
      return; // Skip if already loaded
    }
    
    setLoadingLeagues(true);
    try {
      const activeLeagues = await redis.smembers('league:active');
      
      // Fetch all league data in parallel
      const leagueDataPromises = activeLeagues.map(leagueId => 
        redis.get(`league:${leagueId}`)
      );
      const leagueDataResults = await Promise.all(leagueDataPromises);
      
      const leaguesData: League[] = [];
      leagueDataResults.forEach(leagueData => {
        if (leagueData) {
          const league = typeof leagueData === 'string' ? JSON.parse(leagueData) : leagueData;
          leaguesData.push(league);
        }
      });
      
      setLeagues(leaguesData);
      setDataLoaded(prev => ({ ...prev, leagues: true }));
    } catch (error) {
      console.error('Error fetching leagues:', error);
    } finally {
      setLoadingLeagues(false);
    }
  };

  const fetchMemberships = async () => {
    if (dataLoaded.memberships && Object.keys(memberships).length > 0) {
      return; // Skip if already loaded
    }
    
    setLoadingMemberships(true);
    try {
      const activeLeagues = await redis.smembers('league:active');
      
      // Fetch all team IDs from all leagues in parallel
      const teamIdsPromises = activeLeagues.map(leagueId => 
        redis.smembers(`league:${leagueId}:teams`)
      );
      const teamIdsArrays = await Promise.all(teamIdsPromises);
      
      const membershipsData: {[leagueId: string]: string[]} = {};
      activeLeagues.forEach((leagueId, index) => {
        membershipsData[leagueId] = teamIdsArrays[index];
      });
      
      setMemberships(membershipsData);
      setDataLoaded(prev => ({ ...prev, memberships: true }));
    } catch (error) {
      console.error('Error fetching memberships:', error);
    } finally {
      setLoadingMemberships(false);
    }
  };

  const createTeam = async () => {
    try {
      const response = await fetch('/api/teams', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-api-key': process.env.NEXT_PUBLIC_NOTIFICATION_API_KEY || "",
        },
        body: JSON.stringify(newTeam),
      });
      
      if (response.ok) {
        setResponseMessage('Team created successfully!');
        setNewTeam({ name: "", shortName: "", abbreviation: "", country: "", logoUrl: "", roomHash: "" });
        fetchTeams();
      } else {
        const error = await response.json();
        setResponseMessage(`Error: ${error.error}`);
      }
    } catch (error: any) {
      setResponseMessage(`Error: ${error.message}`);
    }
  };

  const createLeague = async () => {
    try {
      const response = await fetch('/api/leagues', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-api-key': process.env.NEXT_PUBLIC_NOTIFICATION_API_KEY || "",
        },
        body: JSON.stringify(newLeague),
      });
      
      if (response.ok) {
        setResponseMessage('League created successfully!');
        setNewLeague({ id: "", name: "", country: "", type: "domestic", active: true });
        fetchLeagues();
      } else {
        const error = await response.json();
        setResponseMessage(`Error: ${error.error}`);
      }
    } catch (error: any) {
      setResponseMessage(`Error: ${error.message}`);
    }
  };

  const addTeamToLeague = async () => {
    try {
      const response = await fetch('/api/memberships', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-api-key': process.env.NEXT_PUBLIC_NOTIFICATION_API_KEY || "",
        },
        body: JSON.stringify(newMembership),
      });
      
      if (response.ok) {
        setResponseMessage('Team added to league successfully!');
        setNewMembership({ teamId: "", leagueId: "", season: "2024-25", startDate: new Date().toISOString().split('T')[0] });
        fetchTeams();
        fetchLeagues();
        fetchMemberships();
      } else {
        const error = await response.json();
        setResponseMessage(`Error: ${error.error}`);
      }
    } catch (error: any) {
      setResponseMessage(`Error: ${error.message}`);
    }
  };

  const deleteTeam = async (teamId: string) => {
    if (!confirm('Are you sure you want to delete this team?')) return;
    
    try {
      const response = await fetch(`/api/teams/${teamId}`, {
        method: 'DELETE',
        headers: {
          'x-api-key': process.env.NEXT_PUBLIC_NOTIFICATION_API_KEY || "",
        },
      });
      
      if (response.ok) {
        setResponseMessage('Team deleted successfully!');
        fetchTeams();
      } else {
        const error = await response.json();
        setResponseMessage(`Error: ${error.error}`);
      }
    } catch (error: any) {
      setResponseMessage(`Error: ${error.message}`);
    }
  };

  const deleteLeague = async (leagueId: string) => {
    if (!confirm('Are you sure you want to delete this league?')) return;
    
    try {
      const response = await fetch(`/api/leagues/${leagueId}`, {
        method: 'DELETE',
        headers: {
          'x-api-key': process.env.NEXT_PUBLIC_NOTIFICATION_API_KEY || "",
        },
      });
      
      if (response.ok) {
        setResponseMessage('League deleted successfully!');
        fetchLeagues();
      } else {
        const error = await response.json();
        setResponseMessage(`Error: ${error.error}`);
      }
    } catch (error: any) {
      setResponseMessage(`Error: ${error.message}`);
    }
  };

  useEffect(() => {
    fetchTotalNumberOfUsers();
  }, [authenticated]);

  // Lazy load data when tabs are accessed
  useEffect(() => {
    if (authenticated && activeTab === "teams" && !dataLoaded.teams) {
      fetchTeams();
    }
  }, [authenticated, activeTab, dataLoaded.teams]);

  useEffect(() => {
    if (authenticated && activeTab === "leagues" && !dataLoaded.leagues) {
      fetchLeagues();
    }
  }, [authenticated, activeTab, dataLoaded.leagues]);

  useEffect(() => {
    if (authenticated && activeTab === "memberships" && !dataLoaded.memberships) {
      fetchMemberships();
    }
  }, [authenticated, activeTab, dataLoaded.memberships]);

  const handleAuthenticate = () => {
    if (apiKeyInput === process.env.NEXT_PUBLIC_NOTIFICATION_API_KEY) {
      setAuthenticated(true);
    } else {
      alert("Invalid Pass key");
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setResponseMessage("");
    setLoading(true);
    
    const targetURL = useCustomUrl && customTargetUrl 
      ? customTargetUrl 
      : `${process.env.NEXT_PUBLIC_URL}?tab=${category}`;
    
    try {
      const response = await fetch("/api/notify-all", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "x-api-key": process.env.NEXT_PUBLIC_NOTIFICATION_API_KEY || "",
        },
        body: JSON.stringify({ 
          title, 
          body,
          targetURL,
          adminOnly
        }),
      });

      if (response.ok) {
        const data = await response.json();
        setResponseMessage(`Notification sent successfully to ${data.sentTo}! (${data.totalSent} users)`);
        setTitle("");
        setBody("");
        setCategory("matches");
        setAdminOnly(false);
        setCustomTargetUrl("");
        setUseCustomUrl(false);
      } else {
        const errorData = await response.json();
        setResponseMessage(`Error: ${errorData.error || "Failed to send notification"}`);
      }
    } catch (error: any) {
      setResponseMessage(`Error: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  if (!authenticated) {
    return (
      <div className="min-h-screen bg-darkPurple flex items-center justify-center p-4">
        <div className="w-full max-w-md bg-purplePanel rounded-xl shadow-lg p-6 transform transition-all duration-300 hover:shadow-xl border border-limeGreenOpacity">
          <h2 className="text-2xl font-bold text-lightPurple text-center mb-6">
            Admin Login
          </h2>
          <input
            type="password"
            placeholder="Enter Pass Key"
            value={apiKeyInput}
            onChange={(e) => setApiKeyInput(e.target.value)}
            className="w-full p-3 border border-limeGreenOpacity rounded-lg text-lightPurple bg-darkPurple focus:outline-none focus:ring-2 focus:ring-deepPink transition-all duration-200"
          />
          <button
            onClick={handleAuthenticate}
            className="w-full mt-6 bg-deepPink text-white p-3 rounded-lg hover:bg-fontRed transform transition-all duration-200 hover:scale-105"
          >
            Authenticate
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-darkPurple p-4">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-6 p-4 bg-purplePanel rounded-lg shadow-inner border border-limeGreenOpacity">
          <h1 className="text-2xl font-bold text-lightPurple mb-2">FC-Footy Admin Dashboard</h1>
          <p className="text-sm text-lightPurple">
            Total Users: <span className="font-medium text-notWhite">{totalNumberOfUsers}</span>
          </p>
        </div>

        {/* Tabs */}
        <div className="mb-6">
          <div className="border-b border-limeGreenOpacity">
            <nav className="-mb-px flex space-x-8">
              {[
                { id: "notifications", label: "Notifications" },
                { id: "teams", label: "Teams" },
                { id: "leagues", label: "Leagues" },
                { id: "memberships", label: "Memberships" }
              ].map((tab) => (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`py-2 px-1 border-b-2 font-medium text-sm ${
                    activeTab === tab.id
                      ? "border-deepPink text-deepPink"
                      : "border-transparent text-lightPurple hover:text-notWhite hover:border-limeGreenOpacity"
                  }`}
                >
                  {tab.label}
                </button>
              ))}
            </nav>
          </div>
        </div>

        {/* Tab Content */}
        <div className="bg-purplePanel rounded-xl shadow-lg p-8 border border-limeGreenOpacity">
          {/* Notifications Tab */}
          {activeTab === "notifications" && (
            <NotificationsTab
              loading={loading}
              setLoading={setLoading}
              responseMessage={responseMessage}
              setResponseMessage={setResponseMessage}
            />
          )}

          {/* Teams Tab */}
          {activeTab === "teams" && (
            <TeamsTab
              teams={teams}
              loadingTeams={loadingTeams}
              fetchTeams={fetchTeams}
              createTeam={createTeam}
              deleteTeam={deleteTeam}
              newTeam={newTeam}
              setNewTeam={setNewTeam}
              responseMessage={responseMessage}
              setResponseMessage={setResponseMessage}
            />
          )}

          {/* Leagues Tab */}
          {activeTab === "leagues" && (
            <div>
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-2xl font-bold text-lightPurple">League Management</h2>
                <button
                  onClick={fetchLeagues}
                  className="bg-deepPink text-white px-4 py-2 rounded-lg hover:bg-fontRed transition-colors"
                >
                  Refresh
                </button>
              </div>

              {/* Create League Form */}
              <div className="mb-8 p-6 bg-darkPurple rounded-lg border border-limeGreenOpacity">
                <h3 className="text-lg font-semibold mb-4 text-lightPurple">Create New League</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  <input
                    type="text"
                    placeholder="League ID"
                    value={newLeague.id}
                    onChange={(e) => setNewLeague({...newLeague, id: e.target.value})}
                    className="p-2 border border-limeGreenOpacity rounded bg-darkPurple text-lightPurple"
                  />
                  <input
                    type="text"
                    placeholder="League Name"
                    value={newLeague.name}
                    onChange={(e) => setNewLeague({...newLeague, name: e.target.value})}
                    className="p-2 border border-limeGreenOpacity rounded bg-darkPurple text-lightPurple"
                  />
                  <input
                    type="text"
                    placeholder="Country Code (e.g., ENG)"
                    value={newLeague.country}
                    onChange={(e) => setNewLeague({...newLeague, country: e.target.value})}
                    className="p-2 border border-limeGreenOpacity rounded bg-darkPurple text-lightPurple"
                  />
                  <select
                    value={newLeague.type}
                    onChange={(e) => setNewLeague({...newLeague, type: e.target.value as "domestic" | "continental" | "international"})}
                    className="p-2 border border-limeGreenOpacity rounded bg-darkPurple text-lightPurple"
                  >
                    <option value="domestic">Domestic</option>
                    <option value="continental">Continental</option>
                    <option value="international">International</option>
                  </select>
                  <div className="flex items-center space-x-3">
                    <label htmlFor="active" className="text-sm font-medium text-lightPurple">
                      Active
                    </label>
                    <input
                      id="active"
                      type="checkbox"
                      checked={newLeague.active}
                      onChange={(e) => setNewLeague({...newLeague, active: e.target.checked})}
                      className="h-5 w-5 text-deepPink focus:ring-deepPink border-limeGreenOpacity rounded bg-darkPurple"
                    />
                  </div>
                </div>
                <button
                  onClick={createLeague}
                  className="mt-4 bg-deepPink text-white px-6 py-2 rounded-lg hover:bg-fontRed transition-colors"
                >
                  Create League
                </button>
              </div>

              {/* Leagues List */}
              <div>
                <h3 className="text-lg font-semibold mb-4 text-lightPurple">Existing Leagues ({leagues.length})</h3>
                {loadingLeagues ? (
                  <div className="text-center py-8 text-lightPurple">Loading leagues...</div>
                ) : (
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {leagues.map((league) => (
                      <div key={league.id} className="border border-limeGreenOpacity rounded-lg p-4 bg-darkPurple shadow">
                        <div className="flex items-center justify-between mb-2">
                          <h4 className="font-semibold text-lightPurple">{league.name}</h4>
                          <button
                            onClick={() => deleteLeague(league.id)}
                            className="text-fontRed hover:text-deepPink text-sm transition-colors"
                          >
                            Delete
                          </button>
                        </div>
                        <p className="text-sm text-lightPurple">ID: {league.id}</p>
                        <p className="text-sm text-lightPurple">Country: {league.country}</p>
                        <p className="text-sm text-lightPurple">Type: {league.type}</p>
                        <p className="text-sm text-lightPurple">
                          Status: <span className={league.active ? "text-green-400" : "text-red-400"}>
                            {league.active ? "Active" : "Inactive"}
                          </span>
                        </p>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </div>
          )}

          {/* Memberships Tab */}
          {activeTab === "memberships" && (
            <div>
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-2xl font-bold text-lightPurple">Team-League Memberships</h2>
                <button
                  onClick={fetchMemberships}
                  className="bg-deepPink text-white px-4 py-2 rounded-lg hover:bg-fontRed transition-colors"
                >
                  Refresh
                </button>
              </div>

              {/* Add Team to League Form */}
              <div className="mb-8 p-6 bg-darkPurple rounded-lg border border-limeGreenOpacity">
                <h3 className="text-lg font-semibold mb-4 text-lightPurple">Add Team to League</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  <select
                    value={newMembership.teamId}
                    onChange={(e) => setNewMembership({...newMembership, teamId: e.target.value})}
                    className="p-2 border border-limeGreenOpacity rounded bg-darkPurple text-lightPurple"
                  >
                    <option value="">Select Team</option>
                    {teams.map((team) => (
                      <option key={team.id} value={team.id}>
                        {team.name} ({team.abbreviation})
                      </option>
                    ))}
                  </select>
                  <select
                    value={newMembership.leagueId}
                    onChange={(e) => setNewMembership({...newMembership, leagueId: e.target.value})}
                    className="p-2 border border-limeGreenOpacity rounded bg-darkPurple text-lightPurple"
                  >
                    <option value="">Select League</option>
                    {leagues.map((league) => (
                      <option key={league.id} value={league.id}>
                        {league.name} ({league.country})
                      </option>
                    ))}
                  </select>
                  <input
                    type="text"
                    placeholder="Season (e.g., 2024-25)"
                    value={newMembership.season}
                    onChange={(e) => setNewMembership({...newMembership, season: e.target.value})}
                    className="p-2 border border-limeGreenOpacity rounded bg-darkPurple text-lightPurple"
                  />
                  <input
                    type="date"
                    value={newMembership.startDate}
                    onChange={(e) => setNewMembership({...newMembership, startDate: e.target.value})}
                    className="p-2 border border-limeGreenOpacity rounded bg-darkPurple text-lightPurple"
                  />
                </div>
                <button
                  onClick={addTeamToLeague}
                  className="mt-4 bg-deepPink text-white px-6 py-2 rounded-lg hover:bg-fontRed transition-colors"
                >
                  Add Team to League
                </button>
              </div>

              {/* Memberships List */}
              <div>
                <h3 className="text-lg font-semibold mb-4 text-lightPurple">Existing Memberships</h3>
                {loadingMemberships ? (
                  <div className="text-center py-8 text-lightPurple">Loading memberships...</div>
                ) : (
                  <div className="space-y-6">
                    {Object.entries(memberships).map(([leagueId, teamIds]) => {
                      const league = leagues.find(l => l.id === leagueId);
                      const leagueTeams = teams.filter(team => teamIds.includes(team.id));
                      
                      return (
                        <div key={leagueId} className="border border-limeGreenOpacity rounded-lg p-4 bg-darkPurple shadow">
                          <h4 className="text-lg font-semibold mb-3 text-lightPurple">
                            {league ? league.name : `League ${leagueId}`} 
                            <span className="text-sm font-normal text-lightPurple ml-2">
                              ({teamIds.length} teams)
                            </span>
                          </h4>
                          {leagueTeams.length > 0 ? (
                            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
                              {leagueTeams.map((team) => (
                                <div key={team.id} className="flex items-center justify-between p-2 bg-darkPurple border border-limeGreenOpacity rounded">
                                  <div>
                                    <p className="text-sm font-medium text-lightPurple">{team.name}</p>
                                    <p className="text-xs text-lightPurple">{team.abbreviation} • {team.country}</p>
                                  </div>
                                  {team.logoUrl && (
                                    <img src={team.logoUrl} alt={team.name} className="w-6 h-6" />
                                  )}
                                </div>
                              ))}
                            </div>
                          ) : (
                            <p className="text-sm text-lightPurple">No teams in this league</p>
                          )}
                        </div>
                      );
                    })}
                  </div>
                )}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}